import live-web.dom
import live-web.behavior
import live-elements-web-server.view
import live-elements-web-server.style
import live-web-view.content
import live-web-view.color
import live-web-view.layout
import live-web-view.button
import live-web-view.overlay
import live-web-view.docs.internal

component ComponentUsage < Div{
    id: componentUsage

    static any[] use = [
        Dropdown,
        UlV,
        CardDisplay,
        IconButton,
        PrimaryButton,
        Content,
        CardDisplay,
        TooltipArea,
        SourceView,
        ScopedStyle{ src: './componentusage.css' process: 'live-web-view/style/CSSProcessor.lv' }, 
        ScopedStyle{ src: 'live-web-view/style/global.css' process: 'live-web-view/style/CSSProcessor.lv' } 
    ]

    classes: [ScopedStyle.className(ComponentUsage)]

    DOMElement example

    Div{ classes: ['grid']
        id: grid
        children: componentUsage.example && componentUsage.example.element 
            ? componentUsage.example.element.hasOwnProperty('Meta')
                ? [
                    DOMAttach{
                        c: componentUsage.example.element 
                        target: grid 
                    }
                ]
                : [componentUsage.example.element] 
            : []
    }
    SourceView{
        importsSource: componentUsage.example && componentUsage.example.importsSource() ? componentUsage.example.importsSource().source : null
        useSource: componentUsage.example && componentUsage.example.useSource() ? componentUsage.example.useSource().source : null
        contentSource: componentUsage.example && componentUsage.example.contentSource() ? componentUsage.example.contentSource().source : null
        render: componentUsage.example ? componentUsage.example.render : null
    }
}