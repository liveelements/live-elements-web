import live-web.dom
import live-web.behavior
import live-web-view.content
import live-web-view.color
import live-web-view.layout
import live-web-view.button
import live-web-view.overlay
import live-elements-web-server.style
import live-web-view.docs.internal

component SourceViewSingle < Div{
    id: sourceViewSingle

    static any[] use = [ 
        Dropdown,
        UlV,
        IconButton,
        PrimaryButton,
        Content,
        TooltipArea,
        ScopedStyle{ src: './sourceviewsingle.css' process: 'live-web-view/style/CSSProcessor.lv' }
    ]

    string[] extraClasses: []
    classes: this.extraClasses.concat([ScopedStyle.className(SourceViewSingle), this.collapsible ? '' : 'expanded rounded-border'])

    string importsSource
    string useSource
    string contentSource
    number render
    boolean collapsible: true

    Div{ classes: ['button-right']
        Toaster{ 
            id: toaster 
            single: true
            position: Toaster.Position.Parent

            Toast{ extraClasses: ['toolbar-toast', 'transitions']
                T`Copied`
            }
        }
        TooltipArea{ extraClasses: ['position-left']
            IconButton{ props = { data: { container: ScopedStyle.className(SourceViewSingle) } }
                Svg{ 
                    props = {xmlns: 'http://www.w3.org/2000/svg', width: '15', height: '15', viewBox: '0 0 24 24', fill: 'none', stroke: {'': 'currentColor',width: '2',linecap: 'round',linejoin: 'round'}}
                    Path{ props = {transform: 'translate(2,10)', d: 'M13 10L13 11A2 2 0 0 1 11 13L2 13A2 2 0 0 1 0 11L0 2A2 2 0 0 1 2 0L3 0'} }
                    Rect{ props = {x: '9', y: '4', width: '13', height: '13', rx: '2', ry: '2'} }
                }

                DOMBehavior{
                    domEvents = {
                        click: (e) => {
                            e.preventDefault()
                            const containerClass = e.currentTarget.dataset.container
                            let current = e.currentTarget
                            while ( current ){
                                if ( current.classList.contains(containerClass) ){
                                    break
                                }
                                current = current.parentNode
                            }
                            if ( current ){
                                const toast = current.querySelector('.toolbar-toast')
                                const sourceCode = current.querySelector('.source-code')
                                const sourceCodeData = sourceCode.__sourceAttach
                                let content = sourceCodeData.map(d => d.source).join('\n')
                                window.navigator.clipboard.writeText(content)
                                    .then(() => { 
                                        toast.innerHTML = 'Copied'
                                        toast.style.maxHeight = '80px'
                                        toast.classList.add('visible')
                                        setTimeout(() => { 
                                            toast.style.maxHeight = '0px'
                                            toast.classList.remove('visible')
                                        }, 1000)
                                    })
                                    .catch(err => { 
                                        toast.innerHTML = `Failed to copy text: ${err.message}`
                                        toast.style.maxHeight = '80px'
                                        toast.classList.add('visible')
                                        setTimeout(() => { 
                                            toast.style.maxHeight = '0px'
                                            toast.classList.remove('visible')
                                        }, 1000)
                                    })
                            }
                        }
                    }
                }
            }
            Tooltip`Copy source as is`
        }
    }

    Div{ classes: ['source-code']
        children: [].concat(
            sourceViewSingle.contentSource
                ? [
                    Div{ classes: ['segment'] props = { data: { source: { type: 'content' } } }
                        children: sourceViewSingle.importsSource || sourceViewSingle.useSource ? [
                            Span`Content`,
                            HighlightLv.(sourceViewSingle.contentSource){}
                        ] : [
                            HighlightLv.(sourceViewSingle.contentSource){}
                        ]
                    }
                ]
                : []
        )
    }

}