import live-testspec

instance test Spec{
    Scenario{
        name: 'Nested Property Test'
        run: (t) => {
            var data = BaseElement{
                var x: 100
                var y: this.x
            }
            data.x = 200
            t.equals(data.y, 200)
            t.end()
        }
    }

    Scenario{
        name: 'Nested Property Test'
        run: (t) => {
            var data = BaseElement{
                var x: BaseElement{
                    var z: 30
                }
                var y: this.x.z + 100
            }
            data.x.z = 130
            t.equals(data.y, 230)

            data.x = BaseElement{
                var z: 1000
            }
            t.equals(data.y, 1100)
            data.x.z = 300
            t.equals(data.y, 400)
            t.end()
        }
    }

    Scenario{
        name: 'Nested Nested Property Test'
        run: (t) => {
            var data = BaseElement{
                var x: BaseElement{
                    var y: BaseElement{
                        var z: 100
                    }
                }
                var t: this.x.y.z + 100
            }
            t.equals(data.t, 200)
            data.x.y.z = 130

            t.equals(data.t, 230)

            data.x = BaseElement{
                var y: BaseElement{
                    var z: 1000
                }
            }
            t.equals(data.t, 1100)
            data.x.y.z = 300
            t.equals(data.t, 400)
            t.end()
        }
    }

    Scenario{
        name: 'Null initial element assignment'
        run: (t) => {
            component User < BaseElement{
                any name: '123'
            };

            component UserView < BaseElement{
                any user: null
                any userName: this.user ? this.user.name : null
            };

            let userView = UserView{ user: User{} }
            t.equals(userView.userName, '123')
            userView.user.name = '345'
            t.equals(userView.userName, '345')

            userView.user = null
            t.equals(userView.userName, null)

            userView.user = User{}
            userView.user.name = '345'
            t.equals(userView.userName, '345')

            t.end()
        }
    }

    
    Scenario{
        name: 'Setter'
        run: (t) => {
            let setterCount = 0
            component User{
                string value: '100'
                string boundValue: this.value
                set boundValue: (val:string){
                    ++setterCount
                    BaseElement.setProperty(this, 'boundValue', val)
                }
            };

            const user = User{}
            user.value = '300'
            t.equals(setterCount, 1)
            t.equals(user.boundValue, '300')
            user.boundValue = '400'
            t.equals(setterCount, 2)
            t.equals(user.boundValue, '400')

            t.end()
        }
    }
}