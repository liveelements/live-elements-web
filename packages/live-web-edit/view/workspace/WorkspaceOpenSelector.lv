import live-web.dom
import live-web.behavior
import live-elements-web-server.style

component WorkspaceOpenSelector < Div{
    id: workspaceOpenSelector

    static any[] use = [
        ScopedStyle{ src: './style/workspaceopenselector.css' process: 'live-web-view/style/CSSProcessor.lv'  }
    ]

    static fn groupBySection(data:Array<Object>){
        const groupedData = {}
        data.forEach(item => {
            if (!groupedData[item.section]) {
                groupedData[item.section] = {
                    name: item.section,
                    items: []
                };
            }
            groupedData[item.section].items.push(item);
        })
        return Object.values(groupedData);
    }

    boolean isOpen : false

    Object data = { templates: [] }
    Object workspaceForkHandler : null
    Object groupedTemplates: WorkspaceOpenSelector.groupBySection(this.data.templates)

    classes: [ScopedStyle.className(WorkspaceOpenSelector), this.isOpen ? 'open' : '']

    constructor(){
        super()
        this{}
    }

    children: this.groupedTemplates.map(section => {
        return Section{
            H3{ T{ text: section.name } }
            Ul{
                children: section.items.map(template => {
                    return Li{
                        A{ 
                            href: `/create/${template.name}`
                            on click: (e) => {
                                e.preventDefault()
                                if ( workspaceOpenSelector.workspaceForkHandler )
                                    workspaceOpenSelector.workspaceForkHandler(template.name)
                            }
                            
                            T{ text: template.label }
                        }
                    }
                })
            }
        }
    })
}