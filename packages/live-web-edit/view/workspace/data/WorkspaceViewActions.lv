
import live-web-view.layout
import ky from 'ky'

component WorkspaceViewActions{
    constructor(workView:Object){
        super()
        this.workView = workView
        this.catchError = this._catchError.bind(this)
        this{}
    }

    fn refreshFrame(){
        this.workView.data.frameLoading = true
        this.workView.frame.refresh()
    }

    async fn save(){
        if ( !this.workView.data.writeEnabled() )
            return
        const activeEditor = this._findActiveEditor()

        try{
            this.workView.data.loadingStatus = { message: 'Saving ...' }
            const result = await this.workView._dataActions.save(this.workView.data, activeEditor, activeEditor.document)
            this.workView.data.loadingStatus = null
            if ( result.name ){
                window.history.pushState(null, null, this.workView.data.route(`/w/${this.workView.data.workspaceName}`))
            }
        } catch ( e ){
            this._catchError(e)
        }
    }

    async fn saveAll(){
        if ( !this.workView.data.writeEnabled() )
            return

        const editors = []
        const tabLayout = this.workView.tabLayout
        for ( let i = 0; i < tabLayout.children.length; ++i ){
            if ( tabLayout.children[i] instanceof TabContent ){
                const tabcontent = tabLayout.children[i]
                for ( let j = 0; j < tabcontent.children.length; ++j ){
                    const tabpane = tabcontent.children[j]
                    const editor = tabpane.children[0]
                    editors.push(editor)
                }
            }
        }

        try{
            this.workView.data.loadingStatus = { message: 'Saving ...' }
            const result = await this.workView._dataActions.saveAll(this.workView.data, editors)
            this.workView.data.loadingStatus = null
            if ( result.name ){
                window.history.pushState(null, null, this.workView.data.route(`/w/${this.workView.data.workspaceName}`))
            }
        } catch ( e ){
            this._catchError(e)
        }
    }

    fn actionMap(){
        return {
            'save' : this.save.bind(this),
            'compile' : this.compile.bind(this)
        }
    }

    fn lockWrite(){
        if ( !this.workView.data.lockEnabled() )
            return
        this.workView._dataActions.lockWrite(this.workView.data).then(res => {
            if ( res ){
                this.workView.data.writeBehavior = WorkspaceViewData.WriteBehavior.ReadOnly
            }
        }).catch(this.catchError)
    }

    fn toggleWorkspaceOpenSelector(){
        const data = this.workView.data
        if ( !data.workspaceSelector ){
            setTimeout(() => { data.workspaceSelector = true })
        }
    }

    fn closeOpenWorkspaceSelector(){
        this.workView.data.workspaceSelector = false
    }

    fn forkTemplate(name:string){
        const dataActions = this.workView._dataActions
        return dataActions.forkTemplate(name)
            .then( data => {
                this.workView.data.updateFromJSON(data)
                if ( this.workView.data.workspaceName === '' || this.workView.data.workspaceName === '-' ){
                    return
                }
                if ( this.workView.data.workspaceViewUrl !== this.workView.data.workspaceName ){
                    this.workView.data.workspaceViewUrl = this.workView.data.workspaceName
                }
                this.workView.data.logMessages = []
                window.history.pushState(null, null, this.workView.data.route(`/w/${this.workView.data.workspaceName}`))

                if ( this.workView.data.lastCompilation ){
                    this.refreshFrame()
                } else if ( this.workView.data.writeEnabled() ){
                    this.compile()
                }
            })
            .catch(this.catchError) 
    }

    fn load(name:string){
        const dataActions = this.workView._dataActions

        return dataActions.load(this.workView.data, name)
            .then( data => {
                this.workView.data.updateFromJSON(data)
                if ( this.workView.data.workspaceName === '' || this.workView.data.workspaceName === '-' ){
                    return
                }
                if ( this.workView.data.workspaceViewUrl !== this.workView.data.workspaceName ){
                    this.workView.data.workspaceViewUrl = this.workView.data.workspaceName
                }
                this.workView.data.logMessages = []
                window.history.pushState(null, null, this.workView.data.route(`/w/${this.workView.data.workspaceName}`))

                if ( this.workView.data.lastCompilation ){
                    this.refreshFrame()
                } else if ( this.workView.data.writeEnabled() ){
                    this.compile()
                }
            })
            .catch(this.catchError)
    }

    fn fork(){
        const dataActions = this.workView._dataActions
        return dataActions.fork(this.workView.data)
            .then( data => {
                this.workView.data.updateFromJSON(data)
                if ( this.workView.data.workspaceName === '' || this.workView.data.workspaceName === '-' ){
                    return
                }
                if ( this.workView.data.workspaceViewUrl !== this.workView.data.workspaceName ){
                    this.workView.data.workspaceViewUrl = this.workView.data.workspaceName
                }
                this.workView.data.logMessages = []
                window.history.pushState(null, null, this.workView.data.route(`/w/${this.workView.data.workspaceName}`))    

                if ( this.workView.data.lastCompilation ){
                    this.refreshFrame()
                } else if ( this.workView.data.writeEnabled() ){
                    this.compile()
                }

            })
            .catch(this.catchError) 
    }

    fn compile(){
        this.workView.data.loadingStatus = { message: 'Compiling ...' }
        this.compileResolveError()
            .then( res => {
                this.workView.data.loadingStatus = null
                if ( res ){
                    this.workView.reloadFrameHandler(this.workView)
                }
            })
            .catch(this.catchError) 
    }

    fn _catchError(e:Object){
        this.workView.data.loadingStatus = null
        this.workView.data.errors = e.messages ? e.messages : [e.message]
        console.error(e)
    }

    fn compileResolveError(){
        const dataActions = this.workView._dataActions
        if ( this.workView.data.writeBehavior !== WorkspaceViewData.WriteBehavior.Write )
            return Promise.resolve(null)

        return dataActions.compile(this.workView.data)
            .then(res => {
                this.workView.data.errors = []
                return res
            })
    }

    fn _findActiveEditor(){
        const tabLayout = this.workView.tabLayout
        for ( let i = 0; i < tabLayout.children.length; ++i ){
            if ( tabLayout.children[i] instanceof TabContent ){
                const tabcontent = tabLayout.children[i]
                for ( let j = 0; j < tabcontent.children.length; ++j ){
                    const tabpane = tabcontent.children[j]
                    if ( tabpane.classes.includes('active') ){
                        const editor = tabpane.children[0]
                        return editor
                    }
                }
            }
        }
        return null
    }
}