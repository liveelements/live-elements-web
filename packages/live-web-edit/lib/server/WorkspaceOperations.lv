import live-elements-web-server.page.index
import LvDOMEmulator from 'live-elements-web-server/lib/lvdomemulator.mjs'
import WebpackBundler from 'live-elements-web-server/lib/bundle-webpack.mjs'
import {VirtualScript} from 'live-elements-web-server/lib/scripts.mjs'
import ScopedAssignmentControl from 'live-elements-web-server/lib/scoped-assignment-control.mjs'
import ScopedComponentPaths from 'live-elements-web-server/lib/scoped-component-paths.mjs'
import StyleContainer from 'live-elements-web-server/lib/style-container.mjs'
import ScopedComponentCollection from 'live-elements-web-server/shared/scoped-component-collection.mjs'

import generateLoader from '../../resources/loader/generate-loader.mjs'

import path from 'path'
import fs from 'fs'


component WorkspaceOperations{
    
    // workspace:Object,baseUrlParam:string):WorkspaceCompilation
    Object compile: async (workspace, baseUrlParam) => {
        const baseUrl = baseUrlParam ? baseUrlParam : ''

        const page = IndexPage{}
        page.entryScript = `${baseUrl}/v-scripts/${workspace.name}/ws.bundle.js`
        const domEmulator = new LvDOMEmulator({beautify: true})
        const pageDOM = page.captureDOM(domEmulator)
        const pageContent = domEmulator.serializeDOM(pageDOM)

        const id = WorkspaceCompilation.generateid()
        const time = new Date()
        
        const loaderScriptContent = generateLoader({
            mainEntry: './Index.lv',
            usagesRoute: `${baseUrl}/v-use/${workspace.name}`
        })

        try{  
            const compiledResult = await WebpackBundler.compile(
                [
                    WebpackBundler.Entry.create('w', [
                        { path: path.join(workspace.path, 'ws.bundle.js'), content: loaderScriptContent }
                    ])
                ],
                WebpackBundler.Config.create({
                    mode: 'development',
                    devTool: 'inline-source-map',
                    outputFileName: '[name].bundle.js',
                    publicPath: `${baseUrl}/v-scripts/${workspace.name}/`,
                    outputPath: path.join(workspace.path, 'dist')
                })
            )

            const compiledBundle = compiledResult.unwrapOrThrow()
        
            let main = null

            const wsAssets = compiledBundle.assets.map(asset => (WorkspaceAsset{
                name: asset.name
                content: asset.content
            }))

            for ( let i = 0; i < compiledBundle.assets.length; ++i ){
                const asset = compiledBundle.assets[i]
                if ( asset.isMainEntry ){
                    main = wsAssets[i]
                    break
                }
            }

            const compilation = WorkspaceCompilation{
                page = page
                pageContent = pageContent
                identifier = id
                stamp = time
                assets = compiledBundle.assets
                mainAsset = main
                warnings = compiledResult.warnings
                styles = []
            }
            return compilation
        
        } catch ( e ){
            console.error(e)
            return WorkspaceCompilation.__createFromErrors(
                e instanceof Array ? e : [e], id, time, workspace
            )
        }
    }

    //(wscomp:WorkspaceCompilation, usageStructure:Object, wsname:string, baseUrlParam:string)
    Object updateCompilationUsages: async (wscomp, usageStructure, wsname, baseUrlParam) => {
        const baseUrl = baseUrlParam ? baseUrlParam : ''

        const scopedCollection = ScopedComponentCollection.fromJSON(usageStructure)
        ScopedComponentPaths.resolveRelativePaths(scopedCollection, path.resolve('.'))
        const viewsc = scopedCollection.findScopedComponentByUri(usageStructure.uri)

        const styleContainer = new StyleContainer('/styles')
        await styleContainer.addScopedStyles(scopedCollection)

        wscomp.updateStyles(
            styleContainer.outputs.map(o => ({ file: o.output, content: o.content }))
        )

        const scopedViewAssignment = new ScopedAssignmentControl()
        const assignmentStructure = scopedViewAssignment.updateAssignmentStructure(scopedCollection, viewsc)

        wscomp.usageAssignments = {
            scopedStyles: assignmentStructure,
            scopedStyleLinks: scopedViewAssignment.styleLinks(scopedCollection).map(link => `${baseUrl}/v/${wsname}${link}`)
        }

        return wscomp.usageAssignments
    }
}