import live-elements-web-server.router
import live-elements-web-server.page.index
import .lib.middle

import PackagePath from 'live-elements-web-server/lib/package-path.cjs'
import path from 'path'
import fs from 'fs'

component WorkspaceRoute < Route{
    id: workspaceRoute

    string workspacesPath = ''
    string templatesPath = ''
    WorkspaceContainer workspaces = null
    Object view = null
    Array<Object> templates = []
    boolean forkOnLoad = false

    constructor(workspacesPath:string, templates:Array<Object>, operations:WorkspaceOperations){
        super()
        this{}
        
        this.workspacesPath = workspacesPath
        this.templatesPath = path.join(PackagePath.find('live-web-edit', path.resolve('.')), 'resources', 'templates')
        this.templates = templates
        this.workspaces = WorkspaceContainer.create(this.workspacesPath, this.templatesPath, operations)
    }

    static fn findWorkspacesIn(lookupDir:string){
        if ( !fs.existsSync(lookupDir) ){
            return []
        }
        const examples = fs.readdirSync(lookupDir).filter(file => {
            const fullpath = path.join(lookupDir, file)
            const isdir = fs.lstatSync(fullpath).isDirectory()
            if ( !isdir )
                return false
            const wsjson = path.join(fullpath, 'workspace.json')
            if ( !fs.existsSync(wsjson) ){
                return false
            }
            return true
        })

        return examples.map(example => {
            const fullpath = path.join(lookupDir, example)
            const wsjson = path.join(fullpath, 'workspace.json')

            const data = fs.readFileSync(wsjson, 'utf8')
            const json = JSON.parse(data)
            return { 
                path: fullpath,
                name: json.name,
                section: json.section,
                label: json.label ? json.label : json.name
            }
        })
    }

    fn workspaceData(ws:Workspace){
        return {
            name: ws.name,
            documents: ws.documents,
            entry: ws.entry,
            writeBehavior: ws.writeBehavior,
            compilation: ws.compilation ? {
                identifier: ws.compilation.identifier,
                stamp: ws.compilation.stamp.toISOString(),
                errors: ws.compilation.errors.map(e => e.message)
             } : null
        }
    }

    ViewRoute{ url: '/'
        c: workspaceRoute.view
        data: (req, res) => {
            return { 
                baseUrl: workspaceRoute.url,
                templates: workspaceRoute.templates.map(t => { return { name: t.name, label: t.label, section: t.section } }),
                name: '-'
            }
        }
    }
    
    ViewRoute{ url: '/w/:wsname'
        c: workspaceRoute.view
        data: (req, res) => {
            try{
                const ws = workspaceRoute.workspaces.loadWorkspace(req.params.wsname)
                if ( workspaceRoute.forkOnLoad && ws.writeBehavior === Workspace.WriteBehavior.Write ){
                    ws.writeBehavior = Workspace.WriteBehavior.Fork
                }
                const data = workspaceRoute.workspaceData(ws)
                data['baseUrl'] = workspaceRoute.url
                data['templates'] = workspaceRoute.templates.map(t => { return { name: t.name, label: t.label, section: t.section }})
                return data
            } catch ( e ){
                return { error: e.message }
            }
        }
    }

    GetRoute{ url: '/w-load/:wsname' f: async (req, res) => {
            const wsname = req.params.wsname
            let ws = null
            if ( wsname === '-' ){
                if ( fs.existsSync(path.join(workspaceRoute.workspaces.path, 'page'))){
                    ws = await workspaceRoute.workspaces.loadWorkspace('page')
                } else {
                    ws = await workspaceRoute.workspaces.createWorkspaceFrom('default')
                    ws.save()
                }
            } else {
                ws = await workspaceRoute.workspaces.loadWorkspace(wsname)
            }
            res.json(workspaceRoute.workspaceData(ws))
            res.end()
        }
    }

    GetRoute{ url: '/w-documents/:wsname' f: (req, res) => {
            const ws = workspaceRoute.workspaces.loadWorkspace(req.params.wsname)
            res.json(ws.documents.map(d => d.toJSON())).end()
        }
    }

    PostRoute{ url: '/w-fork/:wsname' f: async (req, res) => {
        const name = req.params.wsname
        let wsFrom = name
        if ( wsFrom === 'default' ){
            const ws = await workspaceRoute.workspaces.createWorkspaceFrom('default')
            ws.save()
            res.json(workspaceRoute.workspaceData(ws))
            res.end()
            return
        }

        for ( let i = 0; i < workspaceRoute.templates.length; ++i ){
            if ( workspaceRoute.templates[i].name === name ){
                wsFrom = workspaceRoute.templates[i].path
                const ws = await workspaceRoute.workspaces.createWorkspaceFrom(wsFrom)
                res.json(workspaceRoute.workspaceData(ws))
                res.end()
                return
            }
        }

        const ws = workspaceRoute.workspaces.loadWorkspace(wsFrom)
        const wsfork = await workspaceRoute.workspaces.createWorkspaceFrom(req.params.wsname)
        res.json(workspaceRoute.workspaceData(wsfork))
    }}

    PostRoute{ url: '/w-document/save/:wsname' f: async (req, res) => {
            const ws = workspaceRoute.workspaces.loadWorkspace(req.params.wsname)
            const doc = req.body.document

            if ( ws.writeBehavior === Workspace.WriteBehavior.Write ){
                const wsdoc = ws.isDocumentOpened(doc.path)
                if ( wsdoc ){
                    const contentRestore = wsdoc.content
                    try{
                        wsdoc.content = doc.content
                    } catch ( e ){
                        wsdoc.content = contentRestore
                    }
                    ws.writeFile(doc.path, doc.content)
                }
                res.json({ success: true }).end()
            } else if ( ws.writeBehavior === Workspace.WriteBehavior.Fork ){
                const wsfork = await workspaceRoute.workspaces.createWorkspaceFrom(req.params.wsname)
                const wsdoc = wsfork.isDocumentOpened(doc.path)
                if ( wsdoc ){
                    const contentRestore = wsdoc.content
                    try{
                        wsdoc.content = doc.content
                    } catch ( e ){
                        wsdoc.content = contentRestore
                    }
                    wsfork.writeFile(doc.path, doc.content)
                }
                res.json({ data: workspaceRoute.workspaceData(wsfork) })
            } else {
                res.json({ error: 'Workspace is read-only.'} )
            }
        }
    }

    PostRoute{ url: '/w-compile/:wsname' f: async (req, res) => {
        const ws = workspaceRoute.workspaces.loadWorkspace(req.params.wsname)
        const result = await ws.compile(workspaceRoute.workspaces.operations, workspaceRoute.url)
        if ( result.hasErrors() ){
            res.json({error: { messages: result.errors.map(e => e.message)} }).end()
        } else {
            res.json({success: true, compilation: result.identifier }).end()
        }
    }}

    PostRoute{ url: '/w-lockwrite/:wsname' f: async (req, res) => {
            const ws = workspaceRoute.workspaces.loadWorkspace(req.params.wsname)
            if ( ws.writeBehavior !== Workspace.WriteBehavior.ReadOnly ){
                ws.writeBehavior = Workspace.WriteBehavior.ReadOnly
                ws.save()
            }
            res.json({success: true}).end()
        }
    }

    GetRoute{ url: '/v/:wsname' f: async (req, res) => {
        try{
            const ws = workspaceRoute.workspaces.loadWorkspace(req.params.wsname)
            if ( !ws.compilation ){
                await ws.compile(workspaceRoute.workspaces.operations, workspaceRoute.url)
            }
            if ( ws.compilation.errors.length ){
                res.send(ws.compilation.errors.map(e => e.message).join(',')).end()
            } else {
                res.send(ws.compilation.pageContent).end()
            }
        } catch (e){
            console.error(e)
        }       
    }}

    GetRoute{ url: '/v-scripts/:wsname/ws.bundle.js' f: async (req, res) => {
        const ws = workspaceRoute.workspaces.loadWorkspace(req.params.wsname)
        if ( ws && ws.compilation ){
            res.type('application/javascript')
            res.send(ws.compilation.mainAsset.content).end()
        } else {
            res.sendStatus(404);
        }
    } }
    
    GetRoute{ url: '/v-scripts/:wsname/:scriptid' f: async (req, res) => {
        const ws = workspaceRoute.workspaces.loadWorkspace(req.params.wsname)
        if ( ws && ws.compilation ){
            const asset = ws.compilation.findAsset(req.params.scriptid)
            if ( asset ){
                res.type('application/javascript')
                res.send(asset.content)
                return
            }
        }
        
        res.sendStatus(404);
    } }

    PostRoute{ url: '/v-use/:wsname' f: async (req, res) => {
        const ws = workspaceRoute.workspaces.loadWorkspace(req.params.wsname)
        if ( ws && ws.compilation ){
            let assignmentsToSend = null
            if ( ws.compilation.usageAssignments ){
                assignmentsToSend = ws.compilation.usageAssignments
            } else {
                assignmentsToSend = await workspaceRoute.workspaces.operations.updateCompilationUsages(
                    ws.compilation, req.body.page, ws.name, workspaceRoute.url
                )
                // assignmentsToSend = await ws.compilation.updateUsages(req.body.page, ws.name, workspaceRoute.url)
                ws.save()
            }
            res.json(assignmentsToSend).end()
            return
        }
        res.sendStatus(404);
    }}

    GetRoute{ url: '/v/:wsname/styles/:styleid' f: (req, res) => {
        const ws = workspaceRoute.workspaces.loadWorkspace(req.params.wsname)
        if ( ws && ws.compilation ){
            const style = ws.compilation.findStyle(req.params.styleid)
            if ( style ){
                res.type('text/css')
                res.send(style.content)
                res.end()
                return
            }
        }
        res.sendStatus(404)
    }}
}