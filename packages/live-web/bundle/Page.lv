import .dom

component Page{
    string output: ''
    string title: ''
    var clientRender: null
    string entryScript: this.clientRender ? 'main.js' : ''
    
    default children: []

    get assets(){
        var result = []
        for ( var i = 0; i < this.children.length; ++i ){
            if ( this.children[i] instanceof BundleAssetProvider )
                result = result.concat(this.children[i].collectAssets())
        }
        return result
    }

    get styles(){
        var result = []
        for ( var i = 0; i < this.children.length; ++i ){
            if ( this.children[i].constructor.name === 'Stylesheet' )
                result.push(this.children[i])
        }
        return result
    }
    get scripts(){
        var result = []
        for ( var i = 0; i < this.children.length; ++i ){
            if ( this.children[i].constructor.name === 'Script' )
                result.push(this.children[i])
        }
        return result
    }

    fn captureContentRecurse(domInterface:Object, cb:any){
        var content = this.captureContent(domInterface)
        cb(this, content)
    }

    fn beforeRender(){}

    fn captureContent(domInterface:Object){
        this.beforeRender()

        var init = '<!DOCTYPE html><html>' +
          '<head><meta charset="utf-8" /><title>' + this.title + '</title></head>' + 
          '<body></body>' + 
        '</html>'
        domInterface.setup(init)

        if ( this.clientRender && typeof this.clientRender === 'object' ){
            if ( !this.clientRender.props ){
                this.clientRender.props = {}
            }
            if ( !this.clientRender.props.data ){
                this.clientRender.props.data = {}
            }
            this.clientRender.props.data['content-type'] = 'main'

            if ( this.clientRender instanceof Body ){
                document.body.setAttribute('data-content-type', 'main')
            }
        }


        var scripts = []
        var styles = []

        if ( this.children.length > 0 ){
            var body = null
            for ( var i = 0; i < this.children.length; ++i ){
                var child = this.children[i]
                if ( child.constructor.name === 'Body' ){
                    if ( body )
                        throw new Error("Only a single child of type 'Body' is allowed on a page.")

                    body = child
                    for ( var j = 0; j < body.children.length; ++j ){
                        var temp = document.createElement('div')
                        temp.className = 'temp'
                        body.children[j].expandTo(temp)

                        for ( var k = 0; k < temp.children.length; ++k ){
                            var child = temp.children[k]
                            document.body.appendChild(child)
                        }
                    }
                } else if ( this.children[i] instanceof Stylesheet ){
                    styles.push(this.children[i])
                } else if ( child.constructor.name === 'Script' ){
                    scripts.push(child)
                } else if ( this.children[i] instanceof Link ){
                    var link =  document.createElement("link")
                    var props = this.children[i].props
                    for (const [key, value] of Object.entries(props)) {
                        link[key] = value
                    }
                    document.head.appendChild(link)
                } else if ( this.children[i] instanceof Meta ){
                    var meta =  document.createElement("meta")
                    var props = this.children[i].props
                    for (const [key, value] of Object.entries(props)) {
                        meta.setAttribute(key, value)
                    }
                    document.head.appendChild(meta)
                }
            }
        }

        var parent = this.parent
        while ( parent != null ){
            var parentStyles = parent.ownStyles
            if ( parentStyles && parentStyles.length ){
                for ( var i = 0; i < parentStyles.length; ++i ){
                    styles.push(parentStyles[i])
                }
            }

            var parentScripts = parent.ownScripts
            if ( parentScripts && parentScripts.length ){
                for ( var i = 0; i < parentScripts.length; ++i ){
                    scripts.push(parentScripts[i])
                }
            }

            parent = parent.parent
        }

        for ( var i = 0; i < styles.length; ++i ){
            var link =  document.createElement("link");
            link.rel = 'stylesheet'
            if ( this.output.indexOf('/' ) !== -1 ){ 
                link.href = '/' + styles[i].output;
            } else {
                link.href = styles[i].output;
            }
            document.head.appendChild(link);
        }

        if ( this.entryScript ){
            var script =  document.createElement("script");
            script.src = '/' + this.entryScript;
            document.body.appendChild(script);
        }

        for ( var i = 0; i < scripts.length; ++i ){
            var script =  document.createElement("script");
            if ( scripts[i].output ){
                if ( this.output.indexOf('/' ) !== -1 ){ 
                    script.src = '/' + scripts[i].output;
                } else {
                    script.src = scripts[i].output;
                }
            } else {
                script.src = scripts[i].src
            }
            var props = scripts[i].props
            for (const [key, value] of Object.entries(props)) {
                if ( key !== 'output' && key !== 'src' )
                    script.setAttribute(key, value)
            }
            document.body.appendChild(script);
        }

        var result = domInterface.serialize()
        domInterface.close()
        return result
    }
}