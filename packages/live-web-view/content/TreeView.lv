import live-web.dom
import live-web.behavior
import live-elements-web-server.style

component TreeViewDefaultView < Div{

    constructor(data:Object){
        super()
        TreeViewDefaultView.prototype.__initialize.call(this)
        this.initData(data)
    }

    fn expand(){
        this.classes = this.classes.concat(['expand'])
    }

    fn collapse(){
        this.classes = this.classes.filter(c => c !== 'expand')
    }

    fn initData(data:Object){
        if ( data.children && data.children.length ){
            this.children = [
                Svg{ classes: ['expand-icon'] props: ({xmlns: 'http://www.w3.org/2000/svg', width: '14', height: '14', viewBox: '0 0 16 16'})
                    Path{ props: ({fill: 'none', stroke: {'': 'currentColor',linecap: 'round',linejoin: 'round',width: '2'}, d: 'M5 14l6-6-6-6'}) }
                },
                T{ text = data.label }
            ]
            this.classes = ['expander']
        } else {
            this.children = [T{ text = data.label }]
        }
    }
}

component TreeView < Ul{

    static any[] use = [ 
        ScopedStyle{ src: './style/treeview.css' process: '../style/CSSProcessor.lv' },
        ScopedStyle{ src: '../style/global.css' process: '../style/CSSProcessor.lv' } 
    ]

    string[] extraClasses: []
    classes: this.extraClasses.concat([ScopedStyle.className(TreeView)])

    Object data
    on dataChanged: () => { this.__create() }

    component c: TreeViewDefaultView
    on cChanged: () => { this.__create()}

    event userExpanded(dataNode:TreeNode, dataView:DOMElement)
    event userCollapsed(dataNode:TreeNode, dataView:DOMElement)

    fn __expand(currentElem:DOMElement, currentData:Object, searchData:Object){
        if ( currentData.children ){
            const lis = this.children
            for ( let i = 0; i < currentData.children.length; ++i ){
                const c = lis[i].children[0]
                if ( currentData.children[i] === searchData ){
                    c.expand()
                    const ul = lis[i].children[1]
                    ul.classes = ul.classes.concat(['expand'])
                    break;
                }
                this.__expand(c, currentData.children[i], searchData)
            }
        }
    }

    fn expand(dataNode:Object){
        this.__expand(this, this.data, dataNode)
    }

    fn __createRecurse(data:Object){
        const c = this.c
        const label = data.label ? c.(data){} : null

        if ( data.children ){
            const nested = Ul{ classes: label ? ['expandable', 'nested'] : ['nested'] }
            const nestedChildren = []
            for ( let i = 0; i < data.children.length; ++i ){
                const li = Li{ classes: ['tree-node'] }
                li.children = this.__createRecurse(data.children[i])
                nestedChildren.push(li)
            }
            nested.children = nestedChildren
            return label ? [label, nested] : nestedChildren
        } else {
            return label ? [label] : []
        }
    }

    static fn __search(element:DOMElement, dom:Object){
        if ( !element.children )
            return null
        for ( let i = 0; i < element.children.length; ++i ){
            if ( element.children[i].dom === dom ){
                return element.children[i]
            }
            const deep = TreeView.__search(element.children[i], dom)
            if ( deep )
                return deep
        }
        return null
    }

    fn __create(){
        if ( !this.data || !this.c ){
            return
        }

        const that = this

        this.children = this.__createRecurse(this.data).concat([
            DOMBehavior{
                target: that
                domReady: (d) => {
                    const expanders = d.querySelectorAll('.expander')
                    for ( let i = 0; i < expanders.length; ++i ){
                        const expander = expanders[i]
                        expander.onclick = (e) => {
                            let p = expander
                            while( p ){
                                if ( p.classList && p.classList.contains('tree-node') )
                                    break
                                if ( p === d )
                                    break
                                p = p.parentNode
                            }
                            if ( !p )
                                return

                            if ( that ){
                                const expandElement = TreeView.__search(that, p)
                                if ( !expandElement )
                                    return 
                                
                                const expandable = expandElement.children.find(c => c.classes.includes('expandable'))
                                const expander = expandElement.children.find(c => c.classes.includes('expander') && c.expand && c.collapse)

                                if ( expandable ){
                                    if ( expandable.classes.includes('expand') ){
                                        expandable.classes = expandable.classes.filter(c => c !== 'expand')
                                        if ( expander ){
                                            expander.collapse()
                                            that.userCollapsed.emit(expander.data, expander)
                                        }
                                    } else {
                                        expandable.classes = expandable.classes.concat('expand')
                                        if ( expander ){
                                            expander.expand()
                                            that.userExpanded.emit(expander.data, expander)
                                        }
                                    }
                                }

                            } else {
                                for ( let j = 0; j < p.children.length; ++j ){
                                    if ( p.children[j].classList.contains('expandable') ){
                                        p.children[j].classList.toggle('expand')
                                        expander.classList.toggle('expand')
                                    }
                                }
                            }
                            
                        }
                    }
                }
            }
        ])
    }
}