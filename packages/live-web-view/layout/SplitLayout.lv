import live-web.dom
import live-web.behavior
import live-elements-web-server.style

component SplitLayout < Div{
    id: splitLayout

    static any[] use = [ 
        SplitPane,
        ScopedStyle{ src: './style/splitlayout.css' process: '../style/CSSProcessor.lv' },
        ScopedStyle{ src: '../style/global.css' process: '../style/CSSProcessor.lv' }
    ]

    boolean breakPoint: true
    boolean vertical: false

    string[] extraClasses: []
    classes: this.extraClasses.concat([ScopedStyle.className(SplitLayout), this.breakPoint ? '' : 'no-break', this.vertical ? 'vertical' : ''])

    Object[] panes: []
    DOMElement handle: Div{ classes: ['handle'] 
        Div{ classes: ['handle-pointer']
            props: ({ data: { breakpoint: splitLayout.breakPoint, vertical: splitLayout.vertical } })
            DOMBehavior{
                domReady: (handle) => {
                    const breakPoint = handle.dataset.breakpoint === 'false' ? false : true
                    const vertical = handle.dataset.vertical === 'true' ? true : false

                    const container = handle.parentNode.parentNode
                    let isDragging = false
                    let overlay = null

                    const disableTextSelection = () => { document.body.style.userSelect = 'none' }
                    const enableTextSelection = () => { document.body.style.userSelect = '' }

                    const onMouseDown = (e) => {
                        if ( container.childNodes.length > 2 ){
                            if ( !overlay )
                                overlay = container.querySelector('.overlay')

                            if ( overlay ){
                                overlay.classList.add('show')
                            }

                            isDragging = true
                            disableTextSelection()
                            document.addEventListener('mousemove', onMouseMove)
                            document.addEventListener('mouseup', onMouseUp)
                        }
                    };

                    const onMouseMove = (e) => {
                        e.preventDefault()
                        if (!isDragging) 
                            return

                        const leftPane = container.children[0]
                        const rightPane = container.children[2]
                        let delta = e.clientX - container.getBoundingClientRect().left;

                        const isVertical = vertical || !(window.innerWidth >= 768 || !breakPoint)

                        if (!isVertical) { // 'md' breakpoint
                            if (delta < 100) delta = 100; // Minimum width constraint
                            if (delta > container.clientWidth - 100) delta = container.clientWidth - 100; // Maximum width constraint
                            leftPane.style.width = `${delta}px`;
                            rightPane.style.width = `calc(100% - ${delta}px`
                            leftPane.style.height = '100%'
                            rightPane.style.height = '100%'
                        } else {
                            delta = e.clientY - container.getBoundingClientRect().top;
                            if (delta < 100) delta = 100;
                            if (delta > container.clientHeight - 100) delta = container.clientHeight - 100;
                            leftPane.style.height = `${delta}px`;
                            rightPane.style.height = `${container.clientHeight - delta}px`;
                            leftPane.style.width = '100%'
                            rightPane.style.width = '100%'
                        }
                    }

                    const onMouseUp = () => {
                        if ( overlay )
                            overlay.classList.remove('show')
                        isDragging = false
                        enableTextSelection()
                        document.removeEventListener('mousemove', onMouseMove)
                        document.removeEventListener('mouseup', onMouseUp)
                    }

                    handle.addEventListener('mousedown', onMouseDown)
                }
            }
        }
    }
    
    children: this.panes.reduce((acc, item, index) => {
        acc.push(item)
        if (index !== this.panes.length - 1){
            acc.push(this.handle)
        } else {
            acc.push(Div{ classes: ['overlay'] } )
        }
        return acc;
    }, [])
}