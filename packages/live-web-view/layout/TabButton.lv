import live-web.dom
import live-web.behavior
import live-elements-web-server.style
import .button

component TabButton < PrimaryButton{
    id: tabButton
    classes: this.extraClasses.concat([ScopedStyle.className(TabButton)])

    Array<DOMElement> content: []

    Object __behavior = DOMBehavior{
        target: tabButton
        domEvents: {
            click: (e) => {
                if (typeof tabButton !== 'undefined') { // CSR
                    const directParent = tabButton.parent
                    let parent = directParent
                    while ( parent ){
                        if ( '__updateSelection' in parent ){
                            break
                        }
                        parent = parent.parent
                    }
                    if ( parent ){   
                        let index = -1
                        for ( let i = 0; i < directParent.children.length; ++i ){
                            if ( directParent.children[i] === tabButton ){
                                index = i
                                break
                            }
                        }
                        if ( index >= 0 ){
                            parent.selected = index
                        }
                    }
                } else { //SSR
                    const target = e.target
                    const siblings = target.parentNode.childNodes
                    let index = null
                    for ( let i = 0; i < siblings.length; ++i ){
                        if ( siblings[i] === target ){
                            target.classList.add('active')
                            index = i
                        } else {
                            siblings[i].classList.remove('active')
                        }
                    }

                    if ( index !== null ){
                        const tabLayout = target.parentNode.parentNode
                        let tabContent = target.parentNode.nextSibling
                        while ( tabContent && tabContent.nodeType === window.Node.TEXT_NODE ){
                            tabContent = tabContent.nextSibling
                        }
                        if ( tabContent ){
                            let current = 0
                            for ( let i = 0; i < tabContent.childNodes.length; ++i ){
                                const pane = tabContent.childNodes[i]
                                if ( pane.nodeType !== window.Node.TEXT_NODE ){
                                    pane.classList.remove('active')
                                    if ( current === index ){
                                        pane.classList.add('active')
                                    }
                                    current++
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    children: this.content.concat([this.__behavior])

    
}