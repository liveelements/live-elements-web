import .bundle
import .router
import .view
import .page

import { RouteCollection, ServerApiRoute, ServerViewRoute, ServerMiddlewareRoute } from '../../lib/route-collection.mjs'

component RouteCollector{
    static fn scan(bundle:Bundle){
        return RouteCollector.scanRecurse(bundle, '', [])
    }

    static fn scanRecurse(group:BaseElement, prefix:string, userMiddleware:Array){
        let routes = new RouteCollection()
        userMiddleware = userMiddleware ? userMiddleware : []

        let middlewares = group.children.filter(c => c instanceof MiddlewareRoute)
        for( let i = 0; i < middlewares.length; ++i )
            userMiddleware.push(middlewares[i].middleware)

        for ( let i = 0; i < group.children.length; ++i ){
            if ( group.children[i] instanceof Route ){
                let route = group.children[i]
                let routeUserMiddleware = route.middleware 
                    ? userMiddleware.concat(route.middleware) : userMiddleware
                if ( route instanceof GetRoute ){
                    routes.add(new ServerApiRoute(
                        prefix ? prefix + route.url : route.url,
                        routeUserMiddleware,
                        route.f,
                        ServerApiRoute.GET
                    ))
                } else if ( route instanceof PostRoute ){
                    routes.add(new ServerApiRoute(
                        prefix ? prefix + route.url : route.url,
                        routeUserMiddleware,
                        route.f,
                        ServerApiRoute.POST
                    ))
                } else if ( route instanceof MiddlewareRoute ){
                    routes.push(new ServerMiddlewareRoute(
                        prefix ? prefix + route.url : route.url,
                        routeUserMiddleware,
                        route.f
                    ))
                } else if ( route instanceof ViewRoute ){
                    let placement = []
                    let page = undefined
                    const routeUrl = prefix ? prefix + route.url : route.url
                    if ( route.placement ){
                        if ( typeof route.placement === 'function' && route.placement.prototype !== undefined ){
                            placement = [route.placement]
                        } else if ( route.placement instanceof Page ){
                            page = route.placement
                        } else if ( route.placement instanceof ViewPlacement ){
                            let current = route.placement
                            let collector = [route.placement.c]
                            while ( current.placement ){
                                if ( typeof current.placement === 'function' && current.placement.prototype !== undefined ){
                                    collector.unshift(current.placement)
                                    break
                                } else if ( current.placement instanceof Page ){
                                    page = current.placement
                                    break
                                } else if ( current.placement instanceof ViewPlacement ){
                                    collector.unshift(current.placement.c)
                                    current = current.placement
                                } else {
                                    throw new Error(`Unkown layout placement type for view route: ${routeUrl}.`)
                                }
                            }
                            placement = collector
                        } else {
                            throw new Error(`Unkown placement type for view route: ${routeUrl}.`)
                        }
                    }
                    routes.add(new ServerViewRoute(
                        routeUrl,
                        routeUserMiddleware,
                        route.f,
                        route.c,
                        route.render,
                        placement,
                        page
                    ))
                }

                if ( route.children.length > 0 ){
                    var routeChildRoutes = RouteCollector.scanRecurse(route, prefix ? prefix + route.url : route.url, [...routeUserMiddleware])
                    routes = routes.merge(routeChildRoutes)
                }
            }
        }
        return routes
    }
}