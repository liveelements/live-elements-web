import .bundle
import .router
import .view
import .page

import { RouteCollection, ServerApiRoute, ServerViewRoute, ServerMiddlewareRoute } from '../../lib/routes.mjs'

component RouteCollector < BundleDataCollector{

    constructor(){
        super()
        this._routes = new RouteCollection()

        RouteCollector.prototype.__initialize.call(this)
    }

    static fn create(){ return RouteCollector{} }

    fn name(){ return 'routes' }

    fn iterateStart(group:BaseElement, trail:Object){
        const nestedMiddleware = []
        const middlewares = group.children.filter(c => c instanceof MiddlewareRoute && c.middleware)
        for( let i = 0; i < middlewares.length; ++i )
            nestedMiddleware.push(middlewares[i].middleware)

        const trailMiddleware = trail.routeMiddleware ? trail.routeMiddleware : []
        const currentMiddleware = group instanceof Route && group.middleware ? group.middleware : []

        const routeMiddleware = nestedMiddleware.concat(trailMiddleware).concat(currentMiddleware)
        return {...trail, routeMiddleware: routeMiddleware }
    }

    fn toServerRoute(route:BaseElement, trail:Object){
        if ( !(route instanceof Route) )
            return null

        const middleware = trail.routeMiddleware ? trail.routeMiddleware : []
        const prefix = trail.routePrefix ? trail.routePrefix : ''

        const routeUserMiddleware = route.middleware ? middleware.concat(route.middleware) : middleware
        if ( route instanceof GetRoute ){
            return new ServerApiRoute(
                prefix ? prefix + route.url : route.url,
                routeUserMiddleware,
                route.f,
                ServerApiRoute.GET
            )
        } else if ( route instanceof PostRoute ){
            return new ServerApiRoute(
                prefix ? prefix + route.url : route.url,
                routeUserMiddleware,
                route.f,
                ServerApiRoute.POST
            )
        } else if ( route instanceof MiddlewareRoute && route.f && route.url ){
            return new ServerMiddlewareRoute(
                prefix ? prefix + route.url : route.url,
                routeUserMiddleware,
                route.f
            )
        } else if ( route instanceof ViewRoute ){
            let placement = []
            let page = undefined
            const routeUrl = prefix ? prefix + route.url : route.url
            if ( route.placement ){
                if ( typeof route.placement === 'function' && route.placement.prototype !== undefined ){
                    placement = [route.placement]
                } else if ( route.placement instanceof Page ){
                    page = route.placement
                } else if ( route.placement instanceof ViewPlacement ){
                    let current = route.placement
                    let collector = [route.placement.c]
                    while ( current.placement ){
                        if ( typeof current.placement === 'function' && current.placement.prototype !== undefined ){
                            collector.unshift(current.placement)
                            break
                        } else if ( current.placement instanceof Page ){
                            page = current.placement
                            break
                        } else if ( current.placement instanceof ViewPlacement ){
                            collector.unshift(current.placement.c)
                            current = current.placement
                        } else {
                            throw new Error(`Unkown layout placement type for view route: ${routeUrl}.`)
                        }
                    }
                    placement = collector
                } else {
                    throw new Error(`Unkown placement type for view route: ${routeUrl}.`)
                }
            }
            return new ServerViewRoute(
                routeUrl,
                routeUserMiddleware,
                route.f,
                route.c,
                route.render,
                route.data,
                placement,
                page
            )
        }
    }

    fn visit(route:BaseElement, trail:Object, control:Object){
        if ( !(route instanceof Route) )
            return null

        const middleware = trail.routeMiddleware ? trail.routeMiddleware : []
        const prefix = trail.routePrefix ? trail.routePrefix : ''

        const routeUserMiddleware = route.middleware ? middleware.concat(route.middleware) : middleware

        const serverRoute = this.toServerRoute(route, trail)
        this._routes.add(serverRoute)

        if ( route.children.length > 0 ){
            control.iterate(route, {...trail, routeMiddleware: routeUserMiddleware, routePrefix: prefix + route.url})
        }
    }

    fn end(trail:Object):Object{ 
        const r = this._routes; 
        this._routes = null; 
        return r 
    }
}