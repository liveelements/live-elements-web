import live-web.dom
import .bundle
import .router
import .page
import .page.index

component PageCollector < BundleDataCollector{

    constructor(domEmulator:Object, entryScriptUrl:String){
        super()
        this._pages = []
        this._domEmulator = domEmulator
        this._entryScriptUrl = entryScriptUrl
        PageCollector.prototype.__initialize.call(this)
    }

    static fn create(domEmulator:Object, entryScriptUrl:String){
        return PageCollector.(domEmulator, entryScriptUrl){}
    }

    fn name(){ return 'pages' }

    fn visit(node:BaseElement, trail:Object, control:Object){
        if ( node instanceof Page ){
            this._pages.push(node)
        }
    }

    fn end(_trail:Object):Object{
        const pages = this._pages
        this._pages = []
        for( let i = 0; i < pages.length; ++i ){
            pages[i].entryScript = this._entryScriptUrl
        }
        const pagesSetup = PageCollector.setupDOM(pages, this._domEmulator)
        return pagesSetup.length > 0 ? pagesSetup : PageCollector.defaultPageSetup(this._domEmulator, this._entryScriptUrl)
    }

    static fn setupDOM(pages:Array, domInterface:Object){
        return pages.map( page => { return { page: page, output: page.output, dom: page.captureDOM(domInterface) } } )
    }

    static fn defaultPageSetup(domInterface:Object, entryScript:string){
        let defaultPage = IndexPage{}
        defaultPage.entryScript = entryScript
        return PageCollector.setupDOM([defaultPage], domInterface)
    }
}