import .bundle
import .bundle.assets
import .router
import .page
import path from 'path'
import PackagePath from '../../lib/package-path.cjs'

component AssetProviderCollector < BundleDataCollector{

    constructor(){
        super()
        this._providers = []
        AssetProviderCollector.prototype.__initialize.call(this)
    }

    static fn create(){ return AssetProviderCollector{} }

    fn name(){ return 'assets' }
    fn visit(node:BaseElement, _trail:Object, _control:Object){
        if ( node instanceof Page ){
            const page = node
            for ( var j = 0; j < page.children.length; ++j ){
                if ( page.children[j] instanceof BundleAssetProvider ){
                    this._providers.push(page.children[j])
                }
            }
        } else if ( node instanceof BundleAssetProvider ){
            this._providers.push(node)
        }
    }

    fn end(trail:Object):Object{
        const providers = this._providers
        this._providers = []
        const assets = AssetProviderCollector.collect(providers, trail.bundlePackagePath)
        return {
            providers: providers,
            data: assets
        }
    }

    static fn collect(assetProviders:Array, collectionPath:string){
        let assets = []
        for ( let i = 0; i < assetProviders.length; ++i ){
            const assetProvider = assetProviders[i]
            if ( assetProvider.src ){
                let packageSeparator = assetProvider.src.indexOf('/');
                if (packageSeparator === -1) {
                    throw new Error(`Cannot find asset location: ${assetProvider.src}`);
                }
                let packageName = assetProvider.src.substr(0, packageSeparator);
                let packagePath = PackagePath.find(packageName, collectionPath);
                let pathFromPackage = assetProvider.src.substr(packageSeparator + 1);
                assetProvider.src =  path.join(packagePath, pathFromPackage);
            }
            let collectedAssets = assetProviders[i].collectAssets()
            assets = assets.concat(collectedAssets)
        }
        return assets
    }
}

