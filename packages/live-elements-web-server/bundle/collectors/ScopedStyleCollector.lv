import .bundle
import .router
import .style

import ClassInfo from '../../lib/class-info.mjs'
import { ScopedStyleCollection } from '../../lib/scoped-style.mjs'

component ScopedStyleCollector < BundleDataCollector{

    constructor(){
        super()
        this._collection = new ScopedStyleCollection()
        ScopedStyleCollector.prototype.__initialize.call(this)
    }

    static fn create(){ return ScopedStyleCollector{} }
    fn name(){ return 'scopedStyles' }

    fn visit(node:BaseElement, _trail:Object, _control:Object){
        if ( node instanceof ViewRoute ){
            const routeStyles = ScopedStyleCollector.scanComponentStyles(node.c, node.c)
            this._collection = this._collection.merge(routeStyles)
        }
    }

    fn end(trail:Object):Object{
        const collection = this._collection
        this._collection = new ScopedStyleCollection()
        collection.resolveRelativePaths(trail.bundlePackagePath)
        return collection
    }

    static fn scanComponentStyles(c:component, rootc:component){
        let collection = new ScopedStyleCollection()
        if ( c.use && c.use.length ){
            for ( let i = 0; i < c.use.length; ++i ){
                const use = c.use[i]
                if ( use instanceof ScopedStyle ){
                    collection.addStyle(c, use.src, use.process, rootc)
                } else if (typeof use === 'function' && ClassInfo.extends(use, BaseElement) ){
                    collection.addComponent(c.use[i], rootc)
                    const nestedCollection = ScopedStyleCollector.scanComponentStyles(use, rootc)
                    collection = collection.merge(nestedCollection)
                }
            }
        }
        return collection
    }
}