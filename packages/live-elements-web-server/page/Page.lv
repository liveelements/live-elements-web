import live-web.dom

component Page{
    string output: ''
    string title: ''
    var clientRender: null
    string entryScript: this.clientRender ? 'main.js' : ''
    PageProperties head: null
    
    default children: []

    static fn findElementWithAttribute(root:Object, name:string, value:any){
        if (root.nodeType === 1 && root.getAttribute(name) === value )
            return root

        for (let i = 0; i < root.childNodes.length; i++) {
            const found = Page.findElementWithAttribute(root.childNodes[i], name, value)
            if (found)
                return found
        }
        return null
    }

    static fn findInsertionElement(root:dom){
        return Page.findElementWithAttribute(root, 'data-content-type', 'main')
    }

    get styles(){
        var result = []
        for ( var i = 0; i < this.children.length; ++i ){
            if ( this.children[i].constructor.name === 'Stylesheet' )
                result.push(this.children[i])
        }
        return result
    }
    get scripts(){
        var result = []
        for ( var i = 0; i < this.children.length; ++i ){
            if ( this.children[i].constructor.name === 'Script' )
                result.push(this.children[i])
        }
        return result
    }

    fn captureContentRecurse(domInterface:Object, cb:any){
        var content = this.captureContent(domInterface)
        cb(this, content)
    }

    fn beforeRender(){}

    fn captureDOM(domInterface:Object){
        this.beforeRender()

        var init = '<!DOCTYPE html><html>' +
          '<head><meta charset="utf-8" /><title>' + this.title + '</title></head>' + 
          '<body></body>' + 
        '</html>'
        const domContainer = domInterface.setup(init)
        const document = domContainer.window.document

        if ( this.clientRender && typeof this.clientRender === 'object' ){
            if ( !this.clientRender.props ){
                this.clientRender.props = {}
            }
            if ( !this.clientRender.props.data ){
                this.clientRender.props.data = {}
            }
            this.clientRender.props.data['content-type'] = 'main'

            if ( this.clientRender instanceof Body ){
                document.body.setAttribute('data-content-type', 'main')
            }
        }

        var scripts = []
        var styles = []


        if ( this.children.length > 0 ){
            var body = null
            for ( var i = 0; i < this.children.length; ++i ){
                var child = this.children[i]
                if ( child.constructor.name === 'Body' ){
                    if ( body )
                        throw new Error("Only a single child of type 'Body' is allowed on a page.")

                    body = child
                    DOMElement.patchOuter(document.body, body)
                } else if ( this.children[i] instanceof StyleLink ){
                    styles.push(this.children[i])
                } else if ( child.constructor.name === 'Script' ){
                    scripts.push(child)
                } else if ( this.children[i] instanceof Link ){
                    var link =  document.createElement("link")
                    var props = this.children[i].props
                    for (const [key, value] of Object.entries(props)) {
                        link[key] = value
                    }
                    document.head.appendChild(link)
                } else if ( this.children[i] instanceof Meta ){
                    var meta =  document.createElement("meta")
                    var props = this.children[i].props
                    for (const [key, value] of Object.entries(props)) {
                        meta.setAttribute(key, value)
                    }
                    document.head.appendChild(meta)
                }
            }
        }

        for ( var i = 0; i < styles.length; ++i ){
            var link =  document.createElement("link");
            link.rel = 'stylesheet'
            link.href = styles[i].href
            document.head.appendChild(link);
        }

        if ( this.entryScript ){
            var script =  document.createElement("script");
            script.src = this.entryScript.startsWith('/') ? this.entryScript :  '/' + this.entryScript;
            document.body.appendChild(script);
        }

        for ( var i = 0; i < scripts.length; ++i ){
            var script =  document.createElement("script");
            if ( scripts[i].output ){
                if ( this.output.indexOf('/' ) !== -1 ){ 
                    script.src = '/' + scripts[i].output;
                } else {
                    script.src = scripts[i].output;
                }
            } else {
                script.src = scripts[i].src
            }
            var props = scripts[i].props
            for (const [key, value] of Object.entries(props)) {
                if ( key !== 'output' && key !== 'src' )
                    script.setAttribute(key, value)
            }
            document.body.appendChild(script);
        }

        if ( this.head )
            this.head.expand(document)

        return domContainer
    }

    fn addEntryScript(document:Object){
        if ( this.entryScript ){
            var script =  document.createElement("script");
            script.src = this.entryScript.startsWith('/') ? this.entryScript :  '/' + this.entryScript;
            document.body.appendChild(script);
        }
    }

    fn captureContent(domInterface:Object){
        const dom = this.captureDOM(domInterface)
        return domInterface.serializeDOM(dom)
    }
}