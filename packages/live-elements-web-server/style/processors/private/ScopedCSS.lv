import postcss from 'postcss'

component ScopedCSS{

    string lookups: ''
    string defaultPrefix: ''

    static fn create(opt:Object){
        const lookups = opt.lookups
        const defaultPrefix = opt.defaultPrefix
        const scopedcss = ScopedCSS{ lookups: lookups defaultPrefix: defaultPrefix }
        return scopedcss
    }

    static fn prefixRuleSelector(selector:string, prefix:string):string{
        if ( selector.includes(',') ){
            let newSelector = '';
            let insideParentheses = 0;
            let insideQuotes = false;
            let currentSelector = '';

            for (let i = 0; i < selector.length; i++) {
                let char = selector[i]

                if (char === '(') insideParentheses++
                if (char === ')') insideParentheses--

                if (char === '"' || char === "'") {
                    if (insideQuotes === char) 
                        insideQuotes = false // Close quote
                    else 
                        if (!insideQuotes) insideQuotes = char // Open quote
                }

                // Handle comma separation (only at top level)
                if (char === ',' && insideParentheses === 0 && !insideQuotes) {
                    // Process the current selector
                    currentSelector = currentSelector.trim()
                    if (currentSelector && !currentSelector.startsWith(prefix)) {
                        newSelector += `${prefix} ${currentSelector}, `
                    } else {
                        newSelector += `${currentSelector}, `
                    }
                    currentSelector = ''
                } else {
                    currentSelector += char;
                }
            }

            currentSelector = currentSelector.trim()
            if (currentSelector && !currentSelector.startsWith(prefix)) {
                newSelector += `${prefix} ${currentSelector}`
            } else {
                newSelector += currentSelector
            }

            return newSelector

        } else if ( !selector.startsWith(prefix)){
            return `${prefix} ${selector}`
        }
        return selector
    }

    fn process(file:string, content:string, destination:string){
        const plugin = () => {
            const df = this.defaultPrefix ? `.${this.defaultPrefix}` : ''
            return {
                postcssPlugin: 'rename-component-selectors',
                Once: (root) => {
                    root.walkRules(rule => {
                        let selectorModified = false
                        if (rule.parent.type === 'atrule' && rule.parent.name === 'keyframes'){
                            return
                        }

                        rule.selector = rule.selector.replace(/&([A-Za-z0-9_.-]+)\&?/g, (match, componentName) => {
                            return this.lookups[componentName] ? `.${this.lookups[componentName]}` : match
                        })
                        if (df)
                            rule.selector = ScopedCSS.prefixRuleSelector(rule.selector, df);
                    })

                    root.walkAtRules(rule => {
                        if ( rule.name === 'initialize' ){
                            const paramSegments = rule.params.split(' ')
                            const paramTags = paramSegments.map(p => p.indexOf('.') === -1 ? p : p.substring(0, p.indexOf('.')))
                            const paramNotAllowedNames = paramTags.filter(p => p !== 'body' && p !== 'html' )
                            if ( !paramNotAllowedNames.length ){
                                const ruleNodes = rule.nodes.map(node => node.toString()).join(';\n')
                                rule.replaceWith(`${rule.params}{\n${ruleNodes};\n}${rule.raws.after}`)
                            } else {
                                throw new Error(`Unknown initialize rule parameters: ${rule.params}`)
                            }
                        }
                    })
                }
            }
        }
        plugin.postcss = true

        return postcss([plugin])
            .process(content, { from: file, to: destination })
            .then(result => {
                return { content: result.css, map: result.map ? result.map.toString() : null }
            })
    }

}